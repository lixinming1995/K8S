apiVersion: v1
kind: Namespace
metadata:
  name: pgnamespace
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-basebackup-script
  namespace: pgnamespace
data:
  pg_sync.sh: |
    #!/bin/bash
    # 设置 PG 主节点和从节点的连接信息
    export PGHOST=10.110.15.33
    export PGPORT=30432
    export PGUSER=postgres
    export PGPASSWORD=postgres

    # 检查主节点是否运行
    pg_isready -h $PGHOST -p $PGPORT -U $PGUSER -d postgres
    if [ $? -ne 0 ]; then
      echo "PG 主节点未运行，无法进行同步。"
      exit 1
    fi

    # 创建一个新的复制用户和密码
    psql -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "CREATE USER replication WITH REPLICATION ENCRYPTED PASSWORD 'replication';"

    # 在主节点中启用流复制
    psql -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "ALTER SYSTEM SET listen_addresses = '*' ;"
    pg_ctl restart -D $PGDATA

    # 在从节点中启用流复制
    echo "primary_conninfo = 'host=$PGHOST port=$PGPORT user=replication password=replication'" >> $PGDATA/recovery.conf
    echo "standby_mode = 'on'" >> $PGDATA/recovery.conf
    pg_ctl restart -D $PGDATA

    echo "PG 增量同步成功。"
    exit 0

#  pg_basebackup.sh: |
    #!/bin/bash

#    DB_USER=postgres
#    DB_HOST=10.110.15.33
#    DB_PORT=30432
#    BACKUP_DIR=/var/lib/postgresql/data
#    BACKUP_NAME=pg_wal_bak
#    WAL_ARCHIVE_DIR=/var/lib/postgresql/data/pg_wal

 #   mkdir -p $BACKUP_DIR

  #  pg_basebackup -U $DB_USER -h $DB_HOST -p $DB_PORT -D $BACKUP_DIR -Ft -z -P

   # rm -f $BACKUP_DIR/latest
 #   ln -s $BACKUP_NAME $BACKUP_DIR/latest
#
  #  pg_archivecleanup $WAL_ARCHIVE_DIR $BACKUP_NAME

   # exit 0
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: pgnamespace
spec:
  storageClassName: pg-storage
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 20Gi
  local:
    path: /var/lib/postgresql/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
              - master
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
              - master
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: pgnamespace
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: "pg-storage"
  resources:
    requests:
      storage: 10Gi
---

apiVersion: apps/v1                 #版本
kind: StatefulSet                    #创建资源的类型
metadata:                           #资源的元数据
  name: postgres-dep                   #资源的名称，是元数据必填项
  namespace: pgnamespace
spec:                               #期望状态
  replicas: 2                       #创建的副本数量（pod数量），不填默认为1
  selector:                         #
    matchLabels:
      app: postgres-pod
  template:                         #定义pod的模板
    metadata:                       #pod的元数据
      labels:                       #labels标签，必填一个
        app: postgres-pod             
    spec:                           #pod的期望状态
      hostNetwork: true
      #nodeName: master
      containers:                   #容器
      - name: postgres                 #容器名称
        image: postgres:10.6            #镜像
        imagePullPolicy: IfNotPresent
        ports:                      #容器的端口
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          value: postgres
        volumeMounts:
        #  - name: mysql-config
        #    mountPath: /etc/mysql/conf.d/my.cnf
          - name: pgdata-storage
       #   - name: postgres-pvc
            mountPath: /var/lib/postgresql/data
          - name: pg-basebackup-script
            mountPath: /pg_sync.sh
            subPath: pg_sync.sh
            readOnly: true
      volumes:
    #  - name: mysql-config
    #    configMap:
    #      namespace: mysqlnamespace  
    #      name: mysql-config
      - name: pgdata-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: pg-basebackup-script
        configMap:
          namespace: pgnamespace
          name: pg-basebackup-script
#  volumeClaimTemplates:
#  - metadata:
#      name: postgres-pvc
#    spec:
#      accessModes:
#      - ReadWriteMany
#      resources:
#        requests:
 #         storage: 5Gi
 #     storageClassName: pg-storage

---
apiVersion: v1                      #版本
kind: Service                       #创建资源的类型
metadata:                           #资源的元数据
  name: postgres-svc                   #资源的名称，是元数据必填项
  namespace: pgnamespace
spec:                               #期望状态
  selector:
    app: postgres-pod                   #服务类型
  clusterIP: 10.110.15.33
  type: ClusterIP
  ports:                            #端口
    - port: 30432
      targetPort: 5432              #与containerPort一样
      protocol: TCP
      nodePort: 30532
  type: NodePort
#  selector:
#app: mysql-pod

